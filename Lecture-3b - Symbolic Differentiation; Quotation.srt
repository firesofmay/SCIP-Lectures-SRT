1
00:00:00,000 --> 00:00:02,927


2
00:00:02,927 --> 00:00:19,519
[MUSIC PLAYING]

3
00:00:19,519 --> 00:00:22,719
PROFESSOR: Well, Hal just told
us how you build robust

4
00:00:22,719 --> 00:00:26,960
systems. The key idea was--

5
00:00:26,960 --> 00:00:30,000
I'm sure that many of you don't
really assimilate that

6
00:00:30,000 --> 00:00:32,979
yet-- but the key idea is that
in order to make a system

7
00:00:32,979 --> 00:00:36,849
that's robust, it has to be
insensitive to small changes,

8
00:00:36,850 --> 00:00:39,679
that is, a small change in the
problem should lead to only a

9
00:00:39,679 --> 00:00:41,339
small change in the solution.

10
00:00:41,340 --> 00:00:42,670
There ought to be
a continuity.

11
00:00:42,670 --> 00:00:45,274
The space of solutions ought to
be continuous in this space

12
00:00:45,274 --> 00:00:46,119
of problems.

13
00:00:46,119 --> 00:00:50,269
The way he was explaining how
to do that was instead of

14
00:00:50,270 --> 00:00:52,240
solving a particular problem
at every level of

15
00:00:52,240 --> 00:00:55,520
decomposition of the problem at
the subproblems, where you

16
00:00:55,520 --> 00:00:58,570
solve the class of problems,
which are a neighborhood of

17
00:00:58,570 --> 00:01:01,439
the particular problem that
you're trying to solve.

18
00:01:01,439 --> 00:01:03,979
The way you do that is by
producing a language at that

19
00:01:03,979 --> 00:01:07,500
level of detail in which the
solutions to that class of

20
00:01:07,500 --> 00:01:11,170
problems is representable
in that language.

21
00:01:11,170 --> 00:01:14,370
Therefore when you makes more
changes to the problem you're

22
00:01:14,370 --> 00:01:17,140
trying to solve, you generally
have to make only small local

23
00:01:17,140 --> 00:01:20,640
changes to the solution you've
constructed, because at the

24
00:01:20,640 --> 00:01:23,189
level of detail you're working,
there's a language

25
00:01:23,189 --> 00:01:26,939
where you can express the
various solutions to alternate

26
00:01:26,939 --> 00:01:30,170
problems of the same type.

27
00:01:30,170 --> 00:01:35,090
Well that's the beginning of a
very important idea, the most

28
00:01:35,090 --> 00:01:37,950
important perhaps idea that
makes computer science more

29
00:01:37,950 --> 00:01:40,320
powerful than most of the other
kinds of engineering

30
00:01:40,319 --> 00:01:43,500
disciplines we know about.

31
00:01:43,500 --> 00:01:47,349
What we've seen so far
is sort of how to use

32
00:01:47,349 --> 00:01:49,500
embedding of languages.

33
00:01:49,500 --> 00:01:52,569
And, of course, the power of
embedding languages partly

34
00:01:52,569 --> 00:01:55,479
comes from procedures
like this one that

35
00:01:55,480 --> 00:01:57,500
I showed you yesterday.

36
00:01:57,500 --> 00:02:01,209
What you see here is the
derivative program that we

37
00:02:01,209 --> 00:02:02,279
described yesterday.

38
00:02:02,280 --> 00:02:06,269
It's a procedure that takes a
procedure as an argument and

39
00:02:06,269 --> 00:02:09,879
returns a procedure
as a value.

40
00:02:09,879 --> 00:02:12,680
And using such things
is very nice.

41
00:02:12,680 --> 00:02:15,480
You can make things like push
combinators and all that sort

42
00:02:15,479 --> 00:02:18,019
of wonderful thing that
you saw last time.

43
00:02:18,020 --> 00:02:21,730
However, now I'm going to
really muddy the waters.

44
00:02:21,729 --> 00:02:25,429
See this confuses the issue of
what's the procedure and what

45
00:02:25,430 --> 00:02:28,310
is data, but not very badly.

46
00:02:28,310 --> 00:02:31,259
What we really want to do is
confuse it very badly.

47
00:02:31,259 --> 00:02:33,399
And the best way to do that is
to get involved with the

48
00:02:33,400 --> 00:02:35,980
manipulation of the algebraic
expressions that the

49
00:02:35,979 --> 00:02:39,750
procedures themselves
are expressed in.

50
00:02:39,750 --> 00:02:43,659
So at this point, I want to talk
about instead of things

51
00:02:43,659 --> 00:02:48,299
like on this slide, the
derivative procedure being a

52
00:02:48,300 --> 00:02:49,880
thing that manipulates
a procedure--

53
00:02:49,879 --> 00:02:51,870
this is a numerical method
you see here.

54
00:02:51,870 --> 00:02:56,439
And what you're seeing is
a representation of the

55
00:02:56,439 --> 00:02:59,275
numerical approximation
to the derivative.

56
00:02:59,275 --> 00:03:00,980
That's what's here.

57
00:03:00,979 --> 00:03:04,179
In fact what I'd like to talk
about is instead things that

58
00:03:04,180 --> 00:03:06,170
look like this.

59
00:03:06,169 --> 00:03:12,079
And what we have here are rules
from a calculus book.

60
00:03:12,080 --> 00:03:15,010
These are rules for finding
the derivatives of the

61
00:03:15,009 --> 00:03:18,189
expressions that one
might write in

62
00:03:18,189 --> 00:03:21,520
some algebraic language.

63
00:03:21,520 --> 00:03:24,990
It says things like a derivative
of a constant is 0.

64
00:03:24,990 --> 00:03:27,700
The derivative of the valuable
with respect to which you are

65
00:03:27,699 --> 00:03:29,250
taking the derivative is 1.

66
00:03:29,250 --> 00:03:32,490
The derivative of a constant
times the function is the

67
00:03:32,490 --> 00:03:34,980
constant times the derivative
of the function,

68
00:03:34,979 --> 00:03:38,299
and things like that.

69
00:03:38,300 --> 00:03:39,689
These are exact expressions.

70
00:03:39,689 --> 00:03:43,090
These are not numerical
approximations.

71
00:03:43,090 --> 00:03:44,560
Can we make programs?

72
00:03:44,560 --> 00:03:51,000
And, in fact, it's very easy
to make programs that

73
00:03:51,000 --> 00:03:52,250
manipulate these expressions.

74
00:03:52,250 --> 00:03:56,129


75
00:03:56,129 --> 00:03:57,479
Well let's see.

76
00:03:57,479 --> 00:04:01,349
Let's look at these rules
in some detail.

77
00:04:01,349 --> 00:04:03,849
You all have seen these rules
in your elementary calculus

78
00:04:03,849 --> 00:04:06,139
class at one time or another.

79
00:04:06,139 --> 00:04:10,569
And you know from calculus
that it's easy to produce

80
00:04:10,569 --> 00:04:12,840
derivatives of arbitrary
expressions.

81
00:04:12,840 --> 00:04:14,900
You also know from your
elementary calculus that it's

82
00:04:14,900 --> 00:04:17,139
hard to produce integrals.

83
00:04:17,139 --> 00:04:19,689
Yet integrals and derivatives
are opposites of each other.

84
00:04:19,689 --> 00:04:21,800
They're inverse operations.

85
00:04:21,800 --> 00:04:24,360
And they have the same rules.

86
00:04:24,360 --> 00:04:29,110
What is special about these
rules that makes it possible

87
00:04:29,110 --> 00:04:32,310
for one to produce derivatives
easily and

88
00:04:32,310 --> 00:04:35,100
integrals why it's so hard?

89
00:04:35,100 --> 00:04:37,510
Let's think about that
very simply.

90
00:04:37,509 --> 00:04:39,389
Look at these rules.

91
00:04:39,389 --> 00:04:42,189
Every one of these rules, when
used in the direction for

92
00:04:42,189 --> 00:04:44,259
taking derivatives, which is
in the direction of this

93
00:04:44,259 --> 00:04:48,829
arrow, the left side is
matched against your

94
00:04:48,829 --> 00:04:51,709
expression, and the right side
is the thing which is the

95
00:04:51,709 --> 00:04:53,810
derivative of that expression.

96
00:04:53,810 --> 00:04:55,569
The arrow is going that way.

97
00:04:55,569 --> 00:04:58,629


98
00:04:58,629 --> 00:05:02,829
In each of these rules, the
expressions on the right-hand

99
00:05:02,829 --> 00:05:05,599
side of the rule that are
contained within derivatives

100
00:05:05,600 --> 00:05:08,629
are subexpressions, are proper
subexpressions, of the

101
00:05:08,629 --> 00:05:10,670
expression on the
left-hand side.

102
00:05:10,670 --> 00:05:14,509
So here we see the derivative
of the sum, with is the

103
00:05:14,509 --> 00:05:17,259
expression on the left-hand
side is the sum of the

104
00:05:17,259 --> 00:05:20,029
derivatives of the pieces.

105
00:05:20,029 --> 00:05:25,069
So the rule of moving to the
right are reduction rules.

106
00:05:25,069 --> 00:05:28,110
The problem becomes easier.

107
00:05:28,110 --> 00:05:30,810
I turn a big complicated problem
it's lots of smaller

108
00:05:30,810 --> 00:05:35,000
problems and then combine the
results, a perfect place for

109
00:05:35,000 --> 00:05:36,730
recursion to work.

110
00:05:36,730 --> 00:05:42,310
If I'm going in the other
direction like this, if I'm

111
00:05:42,310 --> 00:05:44,160
trying to produce integrals,
well there are several

112
00:05:44,160 --> 00:05:45,340
problems you see here.

113
00:05:45,339 --> 00:05:48,459
First of all, if I try to
integrate an expression like a

114
00:05:48,459 --> 00:05:50,930
sum, more than one
rule matches.

115
00:05:50,930 --> 00:05:52,610
Here's one that matches.

116
00:05:52,610 --> 00:05:54,850
Here's one that matches.

117
00:05:54,850 --> 00:05:56,210
I don't know which
one to take.

118
00:05:56,209 --> 00:05:57,870
And they may be different.

119
00:05:57,870 --> 00:06:00,250
I may get to explore
different things.

120
00:06:00,250 --> 00:06:04,660
Also, the expressions become
larger in that direction.

121
00:06:04,660 --> 00:06:06,910
And when the expressions become
larger, then there's no

122
00:06:06,910 --> 00:06:10,939
guarantee that any particular
path I choose will terminate,

123
00:06:10,939 --> 00:06:14,379
because we will only terminate
by accidental cancellation.

124
00:06:14,379 --> 00:06:16,839
So that's why integrals
are complicated

125
00:06:16,839 --> 00:06:19,169
searches and hard to do.

126
00:06:19,170 --> 00:06:21,640
Right now I don't want to do
anything as hard as that.

127
00:06:21,639 --> 00:06:24,259
Let's work on derivatives
for a while.

128
00:06:24,259 --> 00:06:26,860
Well, these roles are
ones you know for

129
00:06:26,860 --> 00:06:28,860
the most part hopefully.

130
00:06:28,860 --> 00:06:32,410
So let's see if we can write a
program which is these rules.

131
00:06:32,410 --> 00:06:34,790
And that should be very easy.

132
00:06:34,790 --> 00:06:36,830
Just write the program.

133
00:06:36,829 --> 00:06:39,009
See, because while I showed you
is that it's a reduction

134
00:06:39,009 --> 00:06:43,180
rule, it's something appropriate
for a recursion.

135
00:06:43,180 --> 00:06:45,230
And, of course, what we have for
each of these rules is we

136
00:06:45,230 --> 00:06:48,375
have a case in some
case analysis.

137
00:06:48,375 --> 00:06:50,350
So I'm just going to write
this program down.

138
00:06:50,350 --> 00:06:53,129


139
00:06:53,129 --> 00:06:56,779
Now, of course, I'm going to be
saying something you have

140
00:06:56,779 --> 00:06:57,449
to believe.

141
00:06:57,449 --> 00:06:57,889
Right?

142
00:06:57,889 --> 00:06:59,870
What you have to believe is I
can represent these algebraic

143
00:06:59,870 --> 00:07:03,209
expressions, that I can grab
their parts, that I can put

144
00:07:03,209 --> 00:07:04,329
them together.

145
00:07:04,329 --> 00:07:07,620
We've invented list structures
so that you can do that.

146
00:07:07,620 --> 00:07:09,810
But you don't want to worry
about that now.

147
00:07:09,810 --> 00:07:11,680
Right now I'm going to write the
program that encapsulates

148
00:07:11,680 --> 00:07:14,920
these rules independent of
the representation of the

149
00:07:14,920 --> 00:07:16,170
algebraic expressions.

150
00:07:16,170 --> 00:07:20,580


151
00:07:20,579 --> 00:07:27,609
You have a derivative of
an expression with

152
00:07:27,610 --> 00:07:30,280
respect to a variable.

153
00:07:30,279 --> 00:07:32,019
This is a different
thing than the

154
00:07:32,019 --> 00:07:35,039
derivative of the function.

155
00:07:35,040 --> 00:07:39,129
That's what we saw last time,
that numerical approximation.

156
00:07:39,129 --> 00:07:40,860
It's something you can't
open up a function.

157
00:07:40,860 --> 00:07:42,990
It's just the answers.

158
00:07:42,990 --> 00:07:44,449
The derivative of
an expression is

159
00:07:44,449 --> 00:07:45,990
the way it's written.

160
00:07:45,990 --> 00:07:48,410
And therefore it's a syntactic
phenomenon.

161
00:07:48,410 --> 00:07:50,540
And so a lot of what we're going
to be doing today is

162
00:07:50,540 --> 00:07:53,400
worrying about syntax,
syntax of expressions

163
00:07:53,399 --> 00:07:54,829
and things like that.

164
00:07:54,829 --> 00:07:57,699
Well, there's a case analysis.

165
00:07:57,699 --> 00:08:00,420
Anytime we do anything
complicated thereby a

166
00:08:00,420 --> 00:08:03,689
recursion, we presumably
need a case analysis.

167
00:08:03,689 --> 00:08:05,339
It's the essential
way to begin.

168
00:08:05,339 --> 00:08:06,589
And that's usually
a conditional

169
00:08:06,589 --> 00:08:08,169
of some large kind.

170
00:08:08,170 --> 00:08:10,000
Well, what are their
possibilities?

171
00:08:10,000 --> 00:08:12,290
the first rule that you saw is
this something a constant?

172
00:08:12,290 --> 00:08:16,610


173
00:08:16,610 --> 00:08:20,509
And what I'm asking is, is the
expression a constant with

174
00:08:20,509 --> 00:08:21,920
respect to the variable given?

175
00:08:21,920 --> 00:08:24,990


176
00:08:24,990 --> 00:08:28,460
If so, the result is 0,
because the derivative

177
00:08:28,459 --> 00:08:31,879
represents the rate of
change of something.

178
00:08:31,879 --> 00:08:38,168
If, however, the expression that
I'm taking the derivative

179
00:08:38,168 --> 00:08:42,769
of is the variable I'm varying,
then this is the same

180
00:08:42,769 --> 00:08:52,559
variable, the expression var,
then the rate of change of the

181
00:08:52,559 --> 00:08:55,559
expression with respect
to the variable is 1.

182
00:08:55,559 --> 00:08:56,809
It's the same 1.

183
00:08:56,809 --> 00:08:58,969


184
00:08:58,970 --> 00:09:01,490
Well now there are a couple
of other possibilities.

185
00:09:01,490 --> 00:09:04,009
It could, for example,
be a sum.

186
00:09:04,009 --> 00:09:06,139
Well, I don't know how I'm going
to express sums yet.

187
00:09:06,139 --> 00:09:07,179
Actually I do.

188
00:09:07,179 --> 00:09:10,370
But I haven't told you yet.

189
00:09:10,370 --> 00:09:12,629
But is it a sum?

190
00:09:12,629 --> 00:09:15,519
I'm imagining that there's
some way of telling.

191
00:09:15,519 --> 00:09:20,860
I'm doing a dispatch on the type
of the expression here,

192
00:09:20,860 --> 00:09:24,960
absolutely essential in
building languages.

193
00:09:24,960 --> 00:09:26,519
Languages are made out of
different expressions.

194
00:09:26,519 --> 00:09:28,929
And soon we're going to see
that in our more powerful

195
00:09:28,929 --> 00:09:32,759
methods of building languages
on languages.

196
00:09:32,759 --> 00:09:35,529
Is an expression a sum?

197
00:09:35,529 --> 00:09:38,360
If it's a sum, well, we know the
rule for derivative of the

198
00:09:38,360 --> 00:09:42,159
sum is the sum of the
derivatives of the parts.

199
00:09:42,159 --> 00:09:43,370
One of them is called
the addend and the

200
00:09:43,370 --> 00:09:44,049
other is the augend.

201
00:09:44,049 --> 00:09:45,709
But I don't have enough space
on the blackboard

202
00:09:45,710 --> 00:09:46,810
to such long names.

203
00:09:46,809 --> 00:09:48,659
So I'll call them A1 and A2.

204
00:09:48,659 --> 00:09:50,250
I want to make a sum.

205
00:09:50,250 --> 00:09:53,100


206
00:09:53,100 --> 00:09:57,300
Do you remember which is the sum
for end or the menu end?

207
00:09:57,299 --> 00:10:00,309
Or was it the dividend
and the divisor or

208
00:10:00,309 --> 00:10:01,699
something like that?

209
00:10:01,700 --> 00:10:08,720
Make sum of the derivative
of the A1, I'll call it.

210
00:10:08,720 --> 00:10:12,639
It's the addend of the
expression with respect to the

211
00:10:12,639 --> 00:10:23,505
variable, and the derivative of
the A2 of the expression,

212
00:10:23,505 --> 00:10:27,019
because the two arguments,
the addition with

213
00:10:27,019 --> 00:10:28,269
respect to the variable.

214
00:10:28,269 --> 00:10:32,449


215
00:10:32,450 --> 00:10:36,350
And another rule that we know is
product rule, which is, if

216
00:10:36,350 --> 00:10:37,600
the expression is a product.

217
00:10:37,600 --> 00:10:43,090


218
00:10:43,090 --> 00:10:47,070
By the way, it's a good idea
when you're defining things,

219
00:10:47,070 --> 00:10:49,440
when you're defining predicates,
to give them a

220
00:10:49,440 --> 00:10:51,290
name that ends in
a question mark.

221
00:10:51,289 --> 00:10:53,139
This question mark doesn't
mean anything.

222
00:10:53,139 --> 00:10:54,730
It's for us as an agreement.

223
00:10:54,730 --> 00:10:57,710
It's a conventional interface
between humans so you can read

224
00:10:57,710 --> 00:10:59,980
my programs more easily.

225
00:10:59,980 --> 00:11:02,509
So I want you to, when you write
programs, if you define

226
00:11:02,509 --> 00:11:05,330
a predicate procedure, that's
something that rings true of

227
00:11:05,330 --> 00:11:07,720
false, it should have a name
which ends in question mark.

228
00:11:07,720 --> 00:11:09,740
The list doesn't care.

229
00:11:09,740 --> 00:11:11,740
I care.

230
00:11:11,740 --> 00:11:13,399
I want to make a sum.

231
00:11:13,399 --> 00:11:18,279
Because the derivative of a
product is the sum of the

232
00:11:18,279 --> 00:11:19,919
first times the derivative of
the second plus the second

233
00:11:19,919 --> 00:11:26,620
times the derivative of the
first. Make a sum of two

234
00:11:26,620 --> 00:11:37,710
things, a product of, well, I'm
going to say the M1 of the

235
00:11:37,710 --> 00:11:47,560
expression, and the derivative
of the M2 of the expression

236
00:11:47,559 --> 00:12:01,679
with respect to the variable,
and the product of the

237
00:12:01,679 --> 00:12:10,719
derivative of M1, the multiplier
of the expression,

238
00:12:10,720 --> 00:12:13,450
with respect to the variable.

239
00:12:13,450 --> 00:12:17,340
It's the product of that and the
multiplicand, M2, of the

240
00:12:17,340 --> 00:12:18,590
expression.

241
00:12:18,590 --> 00:12:21,660


242
00:12:21,659 --> 00:12:22,629
Make that product.

243
00:12:22,629 --> 00:12:23,850
Make the sum.

244
00:12:23,850 --> 00:12:25,080
Close that case.

245
00:12:25,080 --> 00:12:28,590
And, of course, I could add as
many cases as I like here for

246
00:12:28,590 --> 00:12:30,960
a complete set of rules you
might find in a calculus book.

247
00:12:30,960 --> 00:12:34,879


248
00:12:34,879 --> 00:12:41,183
So this is what it takes to
encapsulate those rules.

249
00:12:41,183 --> 00:12:43,079
And you see, you have to realize
there's a lot of

250
00:12:43,080 --> 00:12:44,690
wishful thinking here.

251
00:12:44,690 --> 00:12:46,620
I haven't told you anything
about how I'm going to make

252
00:12:46,620 --> 00:12:48,570
these representations.

253
00:12:48,570 --> 00:12:52,830
Now, once I've decided that
this is my set of rules, I

254
00:12:52,830 --> 00:12:55,820
think it's time to play with
the representation.

255
00:12:55,820 --> 00:12:58,030
Let's attack that/

256
00:12:58,029 --> 00:13:01,120
Well, first of all, I'm
going to play a pun.

257
00:13:01,120 --> 00:13:02,870
It's an important pun.

258
00:13:02,870 --> 00:13:06,590
It's a key to a sort
of powerful idea.

259
00:13:06,590 --> 00:13:09,750


260
00:13:09,750 --> 00:13:12,789
If I want to represent sums, and
products, and differences,

261
00:13:12,789 --> 00:13:16,449
and quotients, and things like
that, why not use the same

262
00:13:16,450 --> 00:13:20,660
language as I'm writing
my program in?

263
00:13:20,659 --> 00:13:23,129
I write my program in algebraic
expressions that

264
00:13:23,129 --> 00:13:29,279
look like the sum of the product
on a and the product

265
00:13:29,279 --> 00:13:34,329
of x and x, and things
like that.

266
00:13:34,330 --> 00:13:39,389
And the product of b and x and
c, whatever, make that a sum

267
00:13:39,389 --> 00:13:40,960
of the product.

268
00:13:40,960 --> 00:13:43,230
Right now I don't want to have
procedures with unknown

269
00:13:43,230 --> 00:13:48,300
numbers of arguments, a product
of b and x and c.

270
00:13:48,299 --> 00:13:51,049


271
00:13:51,049 --> 00:13:54,279
This is list structure.

272
00:13:54,279 --> 00:13:56,949
And the reason why this is nice,
is because any one of

273
00:13:56,950 --> 00:14:00,379
these objects has a property.

274
00:14:00,379 --> 00:14:01,970
I know where the car is.

275
00:14:01,970 --> 00:14:04,100
The car is the operator.

276
00:14:04,100 --> 00:14:08,190
And the operands are the
successive cdrs the successive

277
00:14:08,190 --> 00:14:12,276
cars of the cdrs of the
list that this is.

278
00:14:12,275 --> 00:14:14,469
It makes it very convenient.

279
00:14:14,470 --> 00:14:15,560
I have to parse it.

280
00:14:15,559 --> 00:14:17,589
It's been done for me.

281
00:14:17,590 --> 00:14:19,685
I'm using the embedding
and Lisp to advantage.

282
00:14:19,684 --> 00:14:22,859


283
00:14:22,860 --> 00:14:29,340
So, for example, let's start
using list structure to write

284
00:14:29,340 --> 00:14:35,389
down the representation that I'm
implicitly assuming here.

285
00:14:35,389 --> 00:14:37,590
Well I have to define various
things that are implied in

286
00:14:37,590 --> 00:14:38,639
this representation.

287
00:14:38,639 --> 00:14:41,210
Like I have to find out
how to do a constant,

288
00:14:41,210 --> 00:14:42,519
how you do same variable.

289
00:14:42,519 --> 00:14:45,889
Let's do those first. That's
pretty easy enough.

290
00:14:45,889 --> 00:14:47,409
Now I'm going to be introducing
lots of primitives

291
00:14:47,409 --> 00:14:49,679
here, because these are
the primitives that

292
00:14:49,679 --> 00:14:51,745
come with list structure.

293
00:14:51,745 --> 00:14:53,014
OK, you define a constant.

294
00:14:53,014 --> 00:15:02,799


295
00:15:02,799 --> 00:15:06,349
And what I mean by a constant,
an expression that's constant

296
00:15:06,350 --> 00:15:10,860
with respect to a veritable,
is that the expression is

297
00:15:10,860 --> 00:15:11,529
something simple.

298
00:15:11,529 --> 00:15:13,549
I can't take it into
pieces, and yet

299
00:15:13,549 --> 00:15:16,549
it isn't that variable.

300
00:15:16,549 --> 00:15:18,939
I can't break it up, and yet
it isn't that variable.

301
00:15:18,940 --> 00:15:22,840
That does not mean that there
may be other expressions that

302
00:15:22,840 --> 00:15:25,230
are more complicated
that are constants.

303
00:15:25,230 --> 00:15:26,700
It's just that I'm going to
look at the primitive

304
00:15:26,700 --> 00:15:30,509
constants in this way.

305
00:15:30,509 --> 00:15:34,080
So what this is, is it says
that's it's the and.

306
00:15:34,080 --> 00:15:37,030
I can combine predicate
expressions which return true

307
00:15:37,029 --> 00:15:38,610
or false with and.

308
00:15:38,610 --> 00:15:45,600
Something atomic, The expression
is atomic, meaning

309
00:15:45,600 --> 00:15:47,050
it cannot be broken
into parts.

310
00:15:47,049 --> 00:15:51,149
It doesn't have a car and a cdr.
It's not a list. It adds

311
00:15:51,149 --> 00:15:54,250
a special test built
into the system.

312
00:15:54,250 --> 00:16:06,950
And it's not identically
equal to that variable.

313
00:16:06,950 --> 00:16:11,810
I'm representing my variable
by things that are symbols

314
00:16:11,809 --> 00:16:16,549
which cannot be broken into
pieces, things like x, and y,

315
00:16:16,549 --> 00:16:17,799
things like this.

316
00:16:17,799 --> 00:16:19,849


317
00:16:19,850 --> 00:16:21,889
Whereas, of course, something
like this can be broken up

318
00:16:21,889 --> 00:16:23,139
into pieces.

319
00:16:23,139 --> 00:16:24,860


320
00:16:24,860 --> 00:16:40,560
And the same variable of an
expression with respect to a

321
00:16:40,559 --> 00:16:48,839
variable is, in fact, an
atomic expression.

322
00:16:48,840 --> 00:16:50,040
I want to have an atomic

323
00:16:50,039 --> 00:16:59,329
expression, which is identical.

324
00:16:59,330 --> 00:17:08,029


325
00:17:08,029 --> 00:17:13,328
I don't want to look inside
this stuff anymore.

326
00:17:13,328 --> 00:17:16,039
These are primitive maybe.

327
00:17:16,039 --> 00:17:18,180
But it doesn't matter.

328
00:17:18,180 --> 00:17:22,568
I'm using things that are given
to me with a language.

329
00:17:22,568 --> 00:17:24,299
I'm not terribly interest
in them

330
00:17:24,299 --> 00:17:26,899
Now how do we deal with sums?

331
00:17:26,900 --> 00:17:29,100
Ah, something very interesting
will happen.

332
00:17:29,099 --> 00:17:32,379
A sum is something which is not
atomic and begins with the

333
00:17:32,380 --> 00:17:35,230
plus symbol.

334
00:17:35,230 --> 00:17:36,680
That's what it means.

335
00:17:36,680 --> 00:17:39,125
So here, I will define.

336
00:17:39,125 --> 00:17:45,630


337
00:17:45,630 --> 00:18:08,380
An question is a sum if and it's
not atomic and it's head,

338
00:18:08,380 --> 00:18:15,140
it's beginning, its car of the
expression is the symbol plus.

339
00:18:15,140 --> 00:18:19,950


340
00:18:19,950 --> 00:18:21,730
Now you're about to see
something you haven't seen

341
00:18:21,730 --> 00:18:23,690
before, this quotation.

342
00:18:23,690 --> 00:18:26,240


343
00:18:26,240 --> 00:18:29,440
Why do I have that
quotation there?

344
00:18:29,440 --> 00:18:30,970
Say your name,

345
00:18:30,970 --> 00:18:31,410
AUDIENCE: Susanna.

346
00:18:31,410 --> 00:18:32,269
PROFESSOR: Louder.

347
00:18:32,269 --> 00:18:33,190
AUDIENCE: Susanna

348
00:18:33,190 --> 00:18:34,250
PROFESSOR: Say your name.

349
00:18:34,250 --> 00:18:35,160
AUDIENCE: Your name.

350
00:18:35,160 --> 00:18:35,910
PROFESSOR: Louder.

351
00:18:35,910 --> 00:18:36,960
AUDIENCE: Your name.

352
00:18:36,960 --> 00:18:39,100
PROFESSOR: OK.

353
00:18:39,099 --> 00:18:42,039
What I'm showing you here
is that the words

354
00:18:42,039 --> 00:18:45,519
of English are ambiguous.

355
00:18:45,519 --> 00:18:52,220
I was saying, say your name.

356
00:18:52,220 --> 00:18:57,069
I was also possibly saying
say, your name.

357
00:18:57,069 --> 00:19:00,710


358
00:19:00,710 --> 00:19:04,100
But that cannot be distinguished
in speech.

359
00:19:04,099 --> 00:19:09,599
However, we do have a notation
in writing, which is quotation

360
00:19:09,599 --> 00:19:14,179
for distinguishing these
two possible meanings.

361
00:19:14,180 --> 00:19:19,490
In particular, over here, in
Lisp we have a notation for

362
00:19:19,490 --> 00:19:21,509
distinguishing these meetings.

363
00:19:21,509 --> 00:19:24,991
If I were to just write a plus
here, a plus symbol, I would

364
00:19:24,991 --> 00:19:29,399
be asking, is the first element
of the expression, is

365
00:19:29,400 --> 00:19:32,220
the operator position
of the expression,

366
00:19:32,220 --> 00:19:34,759
the addition operator?

367
00:19:34,759 --> 00:19:36,329
I don't know.

368
00:19:36,329 --> 00:19:39,549
I would have to have written the
addition operator there,

369
00:19:39,549 --> 00:19:41,329
which I can't write.

370
00:19:41,329 --> 00:19:45,470
However, this way I'm asking,
is this the symbolic object

371
00:19:45,470 --> 00:19:49,789
plus, which normally stands
for the addition operator?

372
00:19:49,789 --> 00:19:50,420
That's what I want.

373
00:19:50,420 --> 00:19:53,110
That's the question
I want to ask.

374
00:19:53,109 --> 00:19:55,429
Now before I go any further,
I want to point out the

375
00:19:55,430 --> 00:19:59,779
quotation is a very complex
concept, and adding it to a

376
00:19:59,779 --> 00:20:03,509
language causes a great
deal of troubles.

377
00:20:03,509 --> 00:20:06,369
Consider the next slide.

378
00:20:06,369 --> 00:20:11,829
Here's a deduction which we
should all agree with.

379
00:20:11,829 --> 00:20:17,529
We have, Alyssa is smart and
Alyssa is George's mother.

380
00:20:17,529 --> 00:20:22,349
This is an equality, is.

381
00:20:22,349 --> 00:20:27,469
From those two, we can deduce
that George's mother is smart.

382
00:20:27,470 --> 00:20:32,319
Because we can always substitute
equals for equals

383
00:20:32,319 --> 00:20:34,250
in expressions.

384
00:20:34,250 --> 00:20:36,420
Or can we?

385
00:20:36,420 --> 00:20:41,400
Here's a case where we have
"Chicago" has seven letters.

386
00:20:41,400 --> 00:20:45,100
The quotation means that I'm
discussing the word Chicago,

387
00:20:45,099 --> 00:20:46,365
not what the word represents.

388
00:20:46,365 --> 00:20:49,940


389
00:20:49,940 --> 00:20:54,830
Here I have that Chicago is the
biggest city in Illinois.

390
00:20:54,829 --> 00:20:57,159
As a consequence of this, I
would like to deduce that the

391
00:20:57,160 --> 00:20:59,250
biggest city in Illinois
has seven letters.

392
00:20:59,250 --> 00:21:00,785
But that's manifestly false.

393
00:21:00,785 --> 00:21:05,480


394
00:21:05,480 --> 00:21:09,420
Wow, it works.

395
00:21:09,420 --> 00:21:13,420
OK, so once we have things like
that, our language gets

396
00:21:13,420 --> 00:21:14,539
much more complicated.

397
00:21:14,539 --> 00:21:17,440
Because it's no longer true that
things we tend to like to

398
00:21:17,440 --> 00:21:19,750
do with languages, like
substituting equals for equals

399
00:21:19,750 --> 00:21:22,839
and getting right answers, are
going to work without being

400
00:21:22,839 --> 00:21:24,549
very careful.

401
00:21:24,549 --> 00:21:26,470
We can't substitute into what's
called referentially

402
00:21:26,470 --> 00:21:30,410
opaque contexts, of which a
quotation is the prototypical

403
00:21:30,410 --> 00:21:33,380
type of referentially
opaque context.

404
00:21:33,380 --> 00:21:35,560
If you know what that means, you
can consult a philosopher.

405
00:21:35,559 --> 00:21:38,789
Presumably there is
one in the room.

406
00:21:38,789 --> 00:21:42,279
In any case, let's continue now,
now that we at least have

407
00:21:42,279 --> 00:21:45,660
an operational understanding of
a 2000-year-old issue that

408
00:21:45,660 --> 00:21:47,350
has to do with name, and
mention, and all sorts of

409
00:21:47,349 --> 00:21:48,599
things like that.

410
00:21:48,599 --> 00:21:52,439


411
00:21:52,440 --> 00:21:59,789
I have to define what I mean,
how to make a sum of two

412
00:21:59,789 --> 00:22:02,250
things, an a1 and a2.

413
00:22:02,250 --> 00:22:03,589
And I'm going to do
this very simply.

414
00:22:03,589 --> 00:22:13,599
It's a list of the symbol
plus, and a1, and a2.

415
00:22:13,599 --> 00:22:17,074
And I can determine
the first element.

416
00:22:17,075 --> 00:22:21,600


417
00:22:21,599 --> 00:22:34,509
Define a1 to be cadr. I've just

418
00:22:34,509 --> 00:22:36,369
introduced another primitive.

419
00:22:36,369 --> 00:22:39,989
This is the car of the
cdr of something.

420
00:22:39,990 --> 00:22:43,950
You might want to know why car
and cdr are names of these

421
00:22:43,950 --> 00:22:46,720
primitives, and why they've
survived, even though they're

422
00:22:46,720 --> 00:22:48,970
much better ideas like
left and right.

423
00:22:48,970 --> 00:22:51,380
We could have called them
things like that.

424
00:22:51,380 --> 00:22:54,340
Well, first of all, the names
come from the fact that in the

425
00:22:54,339 --> 00:22:57,470
great past, when Lisp was
invented, I suppose in '58 or

426
00:22:57,470 --> 00:23:00,730
something, it was on a
704 or something like

427
00:23:00,730 --> 00:23:01,870
that, which had a machine.

428
00:23:01,869 --> 00:23:04,439
It was a machine that had an
address register and a

429
00:23:04,440 --> 00:23:05,340
decrement register.

430
00:23:05,339 --> 00:23:07,609
And these were the contents of
the address register and the

431
00:23:07,609 --> 00:23:08,269
decrement register.

432
00:23:08,269 --> 00:23:09,879
So it's an historical
accident.

433
00:23:09,880 --> 00:23:11,880
Now why have these
names survived?

434
00:23:11,880 --> 00:23:14,110
It's because Lisp programmers
like to talk to each other

435
00:23:14,109 --> 00:23:15,899
over the phone.

436
00:23:15,900 --> 00:23:18,460
And if you want to have a long
sequence of cars and cdrs you

437
00:23:18,460 --> 00:23:22,529
might say, cdaddedr, which
can be understood.

438
00:23:22,529 --> 00:23:26,329
But left of right or right of
left is not so clear if you

439
00:23:26,329 --> 00:23:26,970
get good at it.

440
00:23:26,970 --> 00:23:30,569
So that's why we have
these words.

441
00:23:30,569 --> 00:23:33,566
All of them up to four deep
are defined typically in a

442
00:23:33,566 --> 00:23:34,816
Lisp system.

443
00:23:34,816 --> 00:23:38,269


444
00:23:38,269 --> 00:23:40,539
A2 to be--

445
00:23:40,539 --> 00:23:43,539


446
00:23:43,539 --> 00:23:46,170
and, of course, you can see
that if I looked at one of

447
00:23:46,170 --> 00:23:54,630
these expressions like the sum
of 3 and 5, what that is is a

448
00:23:54,630 --> 00:24:06,100
list containing the symbol
plus, and a number 3,

449
00:24:06,099 --> 00:24:11,469
and a number 5.

450
00:24:11,470 --> 00:24:16,100
Then the car is the
symbol plus.

451
00:24:16,099 --> 00:24:19,209
The car of the cdr. Well
I take the cdr and

452
00:24:19,210 --> 00:24:20,069
then I take the car.

453
00:24:20,069 --> 00:24:21,200
And that's how I get to the 3.

454
00:24:21,200 --> 00:24:22,630
That's the first argument.

455
00:24:22,630 --> 00:24:24,370
And the car of the cdr
of the cdr gets me to

456
00:24:24,369 --> 00:24:25,639
this one, the 5.

457
00:24:25,640 --> 00:24:28,860


458
00:24:28,859 --> 00:24:32,969
And similarly, of course, I
can define what's going on

459
00:24:32,970 --> 00:24:35,299
with products.

460
00:24:35,299 --> 00:24:36,549
Let's do that very quickly.

461
00:24:36,549 --> 00:24:48,759


462
00:24:48,759 --> 00:24:51,129
Is the expression a product?

463
00:24:51,130 --> 00:25:01,910
Yes if and if it's true, that's
it's not atomic and

464
00:25:01,910 --> 00:25:13,259
it's EQ quote, the asterisk
symbol, which is the operator

465
00:25:13,259 --> 00:25:15,799
for multiplication.

466
00:25:15,799 --> 00:25:35,089
Make product of an M1 and an
M2 to be list, quote, the

467
00:25:35,089 --> 00:25:40,929
asterisk operation
and M1 and M2.

468
00:25:40,930 --> 00:26:00,596
and I define M1 to be cadr and
M2 to be caddr. You get to be

469
00:26:00,596 --> 00:26:02,690
a good Lisp programmer because
you start talking that way.

470
00:26:02,690 --> 00:26:06,430
I cdr down lists and console
them up and so on.

471
00:26:06,430 --> 00:26:09,480
Now, now that we have
essentially a complete program

472
00:26:09,480 --> 00:26:10,880
for finding derivatives,
you can add more

473
00:26:10,880 --> 00:26:12,360
rules if you like.

474
00:26:12,359 --> 00:26:14,799
What kind of behavior
do we get out of it?

475
00:26:14,799 --> 00:26:17,930
I'll have to clear that x.

476
00:26:17,930 --> 00:26:28,060
Well, supposing I define foo
here to be the sum of the

477
00:26:28,059 --> 00:26:30,450
product of ax square
and bx plus c.

478
00:26:30,450 --> 00:26:34,019
That's the same thing we see
here as the algebraic

479
00:26:34,019 --> 00:26:35,259
expression written in the
more conventional

480
00:26:35,259 --> 00:26:37,859
notation over there.

481
00:26:37,859 --> 00:26:40,619
Well, the derivative of foo with
respect to x, which we

482
00:26:40,619 --> 00:26:46,250
can see over here, is this
horrible, horrendous mess.

483
00:26:46,250 --> 00:26:50,759
I would like it to
be 2ax plus b.

484
00:26:50,759 --> 00:26:52,240
But it's not.

485
00:26:52,240 --> 00:26:54,620
It's equivalent to it.

486
00:26:54,619 --> 00:26:56,089
What is it?

487
00:26:56,089 --> 00:27:00,509
I have here, what do I have?

488
00:27:00,509 --> 00:27:04,549
I have the derivative of
the product of x and x.

489
00:27:04,549 --> 00:27:09,409
Over here is, of course,
the sum of x times

490
00:27:09,410 --> 00:27:12,830
1 and 1 times x.

491
00:27:12,829 --> 00:27:14,099
Now, well, it's the first times
the derivative of the

492
00:27:14,099 --> 00:27:15,329
second plus the second times the
derivative of the first.

493
00:27:15,329 --> 00:27:17,779
It's right.

494
00:27:17,779 --> 00:27:20,220
That's 2x of course.

495
00:27:20,220 --> 00:27:26,600
a times 2x is 2ax plus 0X square
doesn't count plus B

496
00:27:26,599 --> 00:27:29,099
over here plus a bunch of 0's.

497
00:27:29,099 --> 00:27:30,129
Well the answer is right.

498
00:27:30,130 --> 00:27:34,390
But I give people take off
points on an exam for that,

499
00:27:34,390 --> 00:27:35,690
sadly enough.

500
00:27:35,690 --> 00:27:37,830
Let's worry about that
in the next segment.

501
00:27:37,829 --> 00:27:39,079
Are there any questions?

502
00:27:39,079 --> 00:27:42,970


503
00:27:42,970 --> 00:27:44,069
Yes?

504
00:27:44,069 --> 00:27:46,789
AUDIENCE: If you had left the
quote when you put the plus,

505
00:27:46,789 --> 00:27:51,119
then would that be referring
to the procedure plus and

506
00:27:51,119 --> 00:27:53,559
could you do a comparison
between that procedure and

507
00:27:53,559 --> 00:27:55,460
some other procedure
if you wanted to?

508
00:27:55,460 --> 00:27:56,319
PROFESSOR: Yes.

509
00:27:56,319 --> 00:27:58,960
Good question.

510
00:27:58,960 --> 00:28:05,650
If I had left this quotation
off at this point, if I had

511
00:28:05,650 --> 00:28:08,720
left that quotation off at that
point, then I would be

512
00:28:08,720 --> 00:28:12,789
referring here to the procedure
which is the thing

513
00:28:12,789 --> 00:28:15,509
that plus is defined to be.

514
00:28:15,509 --> 00:28:22,809
And indeed, I could compare
some procedures with each

515
00:28:22,809 --> 00:28:25,069
other for identity.

516
00:28:25,069 --> 00:28:28,079
Now what that means is
not clear right now.

517
00:28:28,079 --> 00:28:30,099
I don't like to think
about it.

518
00:28:30,099 --> 00:28:31,839
Because I don't know exactly
what it would need to compare

519
00:28:31,839 --> 00:28:32,449
procedures.

520
00:28:32,450 --> 00:28:35,610
There are reasons why that
may make no sense at all.

521
00:28:35,609 --> 00:28:38,889
However, the symbols,
we understand.

522
00:28:38,890 --> 00:28:41,240
And so that's why I
put that quote in.

523
00:28:41,240 --> 00:28:42,509
I want to talk about
the symbol that's

524
00:28:42,509 --> 00:28:43,759
apparent on the page.

525
00:28:43,759 --> 00:28:46,250


526
00:28:46,250 --> 00:28:48,700
Any other questions?

527
00:28:48,700 --> 00:28:50,720
OK.

528
00:28:50,720 --> 00:28:51,059
Thank you.

529
00:28:51,059 --> 00:28:54,210
Let's take a break.

530
00:28:54,210 --> 00:29:30,009
[MUSIC PLAYING]

531
00:29:30,009 --> 00:29:31,579
PROFESSOR: Well, let's see.

532
00:29:31,579 --> 00:29:35,559
We've just developed a fairly
plausible program for

533
00:29:35,559 --> 00:29:38,389
computing the derivatives of
algebraic expressions.

534
00:29:38,390 --> 00:29:40,400
It's an incomplete program,
if you would

535
00:29:40,400 --> 00:29:42,330
like to add more rules.

536
00:29:42,329 --> 00:29:46,019
And perhaps you might extend
it to deal with uses of

537
00:29:46,019 --> 00:29:48,389
addition with any number of
arguments and multiplication

538
00:29:48,390 --> 00:29:49,950
with any of the number
of arguments.

539
00:29:49,950 --> 00:29:52,470
And that's all rather easy.

540
00:29:52,470 --> 00:29:57,620
However, there was a little
fly in that ointment.

541
00:29:57,619 --> 00:30:02,979
We go back to this slide.

542
00:30:02,980 --> 00:30:09,000
We see that the expressions that
we get are rather bad.

543
00:30:09,000 --> 00:30:11,619
This is a rather
bad expression.

544
00:30:11,619 --> 00:30:14,000
How do we get such
an expression?

545
00:30:14,000 --> 00:30:16,940
Why do we have that
expression?

546
00:30:16,940 --> 00:30:19,059
Let's look at this expression
in some detail.

547
00:30:19,059 --> 00:30:21,849
Let's find out where all
the pieces come from.

548
00:30:21,849 --> 00:30:24,589
As we see here, we
have a sum--

549
00:30:24,589 --> 00:30:27,011
just what I showed you at the
end of the last time--

550
00:30:27,011 --> 00:30:30,109
of X times 1 plus 1
time X. That is a

551
00:30:30,109 --> 00:30:32,589
derivative of this product.

552
00:30:32,589 --> 00:30:36,269
The produce of a times that,
where a does not depend upon

553
00:30:36,269 --> 00:30:40,430
x, and therefore is constant
with respect to x, is this

554
00:30:40,430 --> 00:30:43,910
sum, which goes from here all
the way through here and

555
00:30:43,910 --> 00:30:44,840
through here.

556
00:30:44,839 --> 00:30:48,470
Because it is the first thing
times the derivative of the

557
00:30:48,470 --> 00:30:54,900
second plus the derivative of
the first times the second as

558
00:30:54,900 --> 00:30:57,970
the program we wrote
on the blackboard

559
00:30:57,970 --> 00:31:00,740
indicated we should do.

560
00:31:00,740 --> 00:31:06,690
And, of course, the product of
bx over here manifests itself

561
00:31:06,690 --> 00:31:15,220
as B times 1 plus 0 times X
because we see that B does not

562
00:31:15,220 --> 00:31:19,085
depend upon X. And so the
derivative of B is this 0, and

563
00:31:19,085 --> 00:31:23,100
the derivative of X with respect
itself is the 1.

564
00:31:23,099 --> 00:31:26,509
And, of course, the derivative
of the sums over here turn

565
00:31:26,509 --> 00:31:29,359
into these two sums of the
derivatives of the parts.

566
00:31:29,359 --> 00:31:32,619
So what we're seeing here is
exactly the thing I was trying

567
00:31:32,619 --> 00:31:37,759
to tell you about with Fibonacci
numbers a while ago,

568
00:31:37,759 --> 00:31:44,430
that the form of the process
is expanded from the local

569
00:31:44,430 --> 00:31:48,850
rules that you see in the
procedure, that the procedure

570
00:31:48,849 --> 00:31:51,719
represents a set of local rules
for the expansion of

571
00:31:51,720 --> 00:31:53,519
this process.

572
00:31:53,519 --> 00:31:59,440
And here, the process left
behind some stuff, which is

573
00:31:59,440 --> 00:32:00,370
the answer.

574
00:32:00,369 --> 00:32:03,849
And it was constructed by the
walk it takes of the tree

575
00:32:03,849 --> 00:32:05,774
structure, which is
the expression.

576
00:32:05,775 --> 00:32:08,390


577
00:32:08,390 --> 00:32:11,540
So every part in the answer we
see here derives from some

578
00:32:11,539 --> 00:32:14,670
part of the problem.

579
00:32:14,670 --> 00:32:17,360
Now, we can look at, for
example, the derivative of

580
00:32:17,359 --> 00:32:20,500
foo, which is ax square plus
bx plus c, with respect to

581
00:32:20,500 --> 00:32:25,319
other things, like here, for
example, we can see that the

582
00:32:25,319 --> 00:32:27,859
derivative of foo with
respect to a.

583
00:32:27,859 --> 00:32:29,389
And it's very similar.

584
00:32:29,390 --> 00:32:32,840
It's, in fact, the identical
algebraic expression, except

585
00:32:32,839 --> 00:32:34,319
for the fact that theses
0's and 1's are

586
00:32:34,319 --> 00:32:35,899
in different places.

587
00:32:35,900 --> 00:32:38,259
Because the only degree of
freedom we have in this tree

588
00:32:38,259 --> 00:32:42,285
walk is what's constant with
respect to the variable we're

589
00:32:42,285 --> 00:32:44,550
taking the derivative
with respect to and

590
00:32:44,549 --> 00:32:45,799
was the same variable.

591
00:32:45,799 --> 00:32:48,309


592
00:32:48,309 --> 00:32:51,659
In other words, if we go back
to this blackboard and we

593
00:32:51,660 --> 00:32:55,302
look, we have no choice what
to do when we take the

594
00:32:55,301 --> 00:32:58,149
derivative of the sum
or a product.

595
00:32:58,150 --> 00:33:03,840
The only interesting place here
is, is the expression the

596
00:33:03,839 --> 00:33:07,589
variable, or is the expression
a constant with respect to

597
00:33:07,589 --> 00:33:10,129
that variable for very, very
small expressions?

598
00:33:10,130 --> 00:33:13,220
In which case we get various
1's and 0's, which if we go

599
00:33:13,220 --> 00:33:17,289
back to this slide, we can see
that the 0's that appear here,

600
00:33:17,289 --> 00:33:21,740
for example, this 1 over here
in derivative of foo with

601
00:33:21,740 --> 00:33:25,980
respect to A, which gets us an
X square, because that 1 gets

602
00:33:25,980 --> 00:33:32,769
the multiply of X and X into
the answer, that 1 is 0.

603
00:33:32,769 --> 00:33:34,173
Over here, we're not taking
the derivative of foo with

604
00:33:34,173 --> 00:33:36,690
respect to c.

605
00:33:36,690 --> 00:33:40,301
But the shapes of these
expressions are the same.

606
00:33:40,300 --> 00:33:42,560
See all those shapes.

607
00:33:42,560 --> 00:33:43,810
They're the same.

608
00:33:43,810 --> 00:33:50,480


609
00:33:50,480 --> 00:33:53,750
Well is there anything
wrong with our rules?

610
00:33:53,750 --> 00:33:54,029
No.

611
00:33:54,029 --> 00:33:56,250
They're the right rules.

612
00:33:56,250 --> 00:33:58,160
We've been through
this one before.

613
00:33:58,160 --> 00:34:02,019
One of the things you're going
to begin to discover is that

614
00:34:02,019 --> 00:34:03,269
there aren't too many
good ideas.

615
00:34:03,269 --> 00:34:06,509


616
00:34:06,509 --> 00:34:12,139
When we were looking at rational
numbers yesterday,

617
00:34:12,139 --> 00:34:14,909
the problem was that we got
6/8 rather then 3/4.

618
00:34:14,909 --> 00:34:17,949
The answer was unsimplified.

619
00:34:17,949 --> 00:34:21,150
The problem, of course,
is very similar.

620
00:34:21,150 --> 00:34:24,349
There are things I'd like to be
identical by simplification

621
00:34:24,349 --> 00:34:27,349
that don't become identical.

622
00:34:27,349 --> 00:34:30,690
And yet the rules for doing
addition a multiplication of

623
00:34:30,690 --> 00:34:34,000
rational numbers were correct.

624
00:34:34,000 --> 00:34:36,349
So the way we might solve this
problem is do the thing we did

625
00:34:36,349 --> 00:34:37,940
last time, which always works.

626
00:34:37,940 --> 00:34:40,690
If something worked last time
it ought to work again.

627
00:34:40,690 --> 00:34:43,119
It's changed representation.

628
00:34:43,119 --> 00:34:45,349
Perhaps in the representation
we could put in a

629
00:34:45,349 --> 00:34:48,940
simplification step that
produces a simplified

630
00:34:48,940 --> 00:34:50,199
representation.

631
00:34:50,199 --> 00:34:52,579
This may not always
work, of course.

632
00:34:52,579 --> 00:34:55,210
I'm not trying to say that
it always works.

633
00:34:55,210 --> 00:34:59,539
But it's one of the pieces of
artillery we have in our war

634
00:34:59,539 --> 00:35:01,559
against complexity.

635
00:35:01,559 --> 00:35:04,360
You see, because we solved our
problem very carefully.

636
00:35:04,360 --> 00:35:06,170
What we've done, is
we've divided the

637
00:35:06,170 --> 00:35:07,630
world in several parts.

638
00:35:07,630 --> 00:35:12,980
There are derivatives rules and
general rules for algebra

639
00:35:12,980 --> 00:35:16,420
of some sort at this
level of detail.

640
00:35:16,420 --> 00:35:17,925
and i have an abstraction
barrier.

641
00:35:17,925 --> 00:35:21,874


642
00:35:21,873 --> 00:35:32,709
And i have the representation of
the algebraic expressions,

643
00:35:32,710 --> 00:35:33,960
list structure.

644
00:35:33,960 --> 00:35:37,420


645
00:35:37,420 --> 00:35:43,050
And in this barrier, I have
the interface procedures.

646
00:35:43,050 --> 00:35:49,410
I have constant, and things
like same-var.

647
00:35:49,409 --> 00:35:54,679


648
00:35:54,679 --> 00:35:58,094
I have things like
sum, make-sum.

649
00:35:58,094 --> 00:36:02,309


650
00:36:02,309 --> 00:36:06,769
I have A1, A2.

651
00:36:06,769 --> 00:36:09,369
I have products and things
like that, all the other

652
00:36:09,369 --> 00:36:11,489
things I might need for various
kinds of algebraic

653
00:36:11,489 --> 00:36:13,000
expressions.

654
00:36:13,000 --> 00:36:18,079
Making this barrier allows me
to arbitrarily change the

655
00:36:18,079 --> 00:36:21,710
representation without changing
the rules that are

656
00:36:21,710 --> 00:36:25,059
written in terms of that
representation.

657
00:36:25,059 --> 00:36:28,219
So if I can make the problem
go away by changing

658
00:36:28,219 --> 00:36:32,319
representation, the composition
of the problem

659
00:36:32,320 --> 00:36:35,660
into these two parts has
helped me a great deal.

660
00:36:35,659 --> 00:36:38,859
So let's take a very simple
case of this.

661
00:36:38,860 --> 00:36:40,329
What was one of the problems?

662
00:36:40,329 --> 00:36:44,114
Let's go back to this
transparency again.

663
00:36:44,114 --> 00:36:48,279
And we see here, oh yes, there's
horrible things like

664
00:36:48,280 --> 00:36:53,190
here is the sum of an
expression and 0.

665
00:36:53,190 --> 00:36:55,590
Well that's no reason to think
of it as anything other than

666
00:36:55,590 --> 00:36:57,300
the expression itself.

667
00:36:57,300 --> 00:36:59,970
Why should the summation
operation have

668
00:36:59,969 --> 00:37:03,449
made up this edition?

669
00:37:03,449 --> 00:37:05,549
It can be smarter than that.

670
00:37:05,550 --> 00:37:09,080
Or here, for example, is
a multiplication of

671
00:37:09,079 --> 00:37:10,815
something by 1.

672
00:37:10,815 --> 00:37:12,989
It's another thing like that.

673
00:37:12,989 --> 00:37:14,959
Or here is a product of
something with 0, which is

674
00:37:14,960 --> 00:37:17,800
certainly 0.

675
00:37:17,800 --> 00:37:21,430
So we won't have to make
this construction.

676
00:37:21,429 --> 00:37:23,799
So why don't we just do that?

677
00:37:23,800 --> 00:37:25,340
We need to change the way
the representation

678
00:37:25,340 --> 00:37:27,990
works, almost here.

679
00:37:27,989 --> 00:37:37,500


680
00:37:37,500 --> 00:37:42,059
Make-sum to be.

681
00:37:42,059 --> 00:37:44,019
Well, now it's not something
so simple.

682
00:37:44,019 --> 00:37:48,500
I'm not going to make a list
containing the symbol plus and

683
00:37:48,500 --> 00:37:51,322
things unless I need to.

684
00:37:51,322 --> 00:37:52,630
Well, what are the
possibilities?

685
00:37:52,630 --> 00:37:57,220


686
00:37:57,219 --> 00:37:59,419
I have some sort
of cases here.

687
00:37:59,420 --> 00:38:09,159
If I have numbers, if
anyone is a number--

688
00:38:09,159 --> 00:38:10,929
and here's another primitive
I've just introduced, it's

689
00:38:10,929 --> 00:38:15,230
possible to tell whether
something's number--

690
00:38:15,230 --> 00:38:23,090
and if number A2, meaning
they're not symbolic

691
00:38:23,090 --> 00:38:26,280
expressions, then why not
do the addition now?

692
00:38:26,280 --> 00:38:29,540
The result is just a
plus of A1 and A2.

693
00:38:29,539 --> 00:38:32,269


694
00:38:32,269 --> 00:38:34,000
I'm not asking if these
represent numbers.

695
00:38:34,000 --> 00:38:37,099
Of course all of these symbols
represent numbers.

696
00:38:37,099 --> 00:38:39,099
I'm talking about whether
the one I've got is the

697
00:38:39,099 --> 00:38:43,420
number 3 right now.

698
00:38:43,420 --> 00:38:59,070
And, for example, supposing A1
is a number, and it's equal to

699
00:38:59,070 --> 00:39:06,900
0, well then the answer
is just A2.

700
00:39:06,900 --> 00:39:10,697
There is no reason to
make anything up.

701
00:39:10,697 --> 00:39:27,629
And if A2 is a number,
and equal A20, then

702
00:39:27,630 --> 00:39:30,210
the result is A1.

703
00:39:30,210 --> 00:39:32,769
And only if I can't figure out
something better to do with

704
00:39:32,769 --> 00:39:41,159
this situation, well, I can
start a list. Otherwise I want

705
00:39:41,159 --> 00:39:45,789
the representation to be the
list containing the quoted

706
00:39:45,789 --> 00:39:51,849
symbol plus, and A1, and A2.

707
00:39:51,849 --> 00:39:58,719


708
00:39:58,719 --> 00:40:00,659
And, of course, a very
similar thing

709
00:40:00,659 --> 00:40:03,019
can be done for products.

710
00:40:03,019 --> 00:40:05,650
And I think I'll avoid
boring you with them.

711
00:40:05,650 --> 00:40:07,740
I was going to write it
on the blackboard.

712
00:40:07,739 --> 00:40:09,079
I don't think it's necessary.

713
00:40:09,079 --> 00:40:10,829
You know what to do.

714
00:40:10,829 --> 00:40:12,880
It's very simple.

715
00:40:12,880 --> 00:40:17,890
But now, let's just see the kind
of results we get out of

716
00:40:17,889 --> 00:40:21,869
changing our program
in this way.

717
00:40:21,869 --> 00:40:25,920
Well, here's the derivatives
after having just changed the

718
00:40:25,920 --> 00:40:28,809
constructors for expressions.

719
00:40:28,809 --> 00:40:35,809
The same foo, aX square plus bX
plus c, and what I get is

720
00:40:35,809 --> 00:40:40,264
nothing more than the derivative
of that is 2aX plus

721
00:40:40,264 --> 00:40:40,659
B.

722
00:40:40,659 --> 00:40:42,670
Well, it's not completely
simplified.

723
00:40:42,670 --> 00:40:45,170
I would like to collect
common terms and sums.

724
00:40:45,170 --> 00:40:47,180
Well, that's more work.

725
00:40:47,179 --> 00:40:51,129
And, of course, programs to do
this sort of thing are huge

726
00:40:51,130 --> 00:40:52,440
and complicated.

727
00:40:52,440 --> 00:40:56,510
Algebraic simplification, it's
a very complicated mess.

728
00:40:56,510 --> 00:40:58,240
There's a very famous program
you may have heard of called

729
00:40:58,239 --> 00:41:02,750
Maxima developed at MIT in the
past, which is 5,000 pages of

730
00:41:02,750 --> 00:41:05,829
Lisp code, mostly the algebraic
simplification

731
00:41:05,829 --> 00:41:07,079
operations.

732
00:41:07,079 --> 00:41:10,079


733
00:41:10,079 --> 00:41:12,210
There we see the derivative
of foo.

734
00:41:12,210 --> 00:41:14,389
In fact, X is at something I
wouldn't take off more than 1

735
00:41:14,389 --> 00:41:18,389
point for on an elementary
calculus class.

736
00:41:18,389 --> 00:41:20,960
And the derivative of foo with
respect to a, well it's gone

737
00:41:20,960 --> 00:41:24,730
down to X times X, which
isn't so bad.

738
00:41:24,730 --> 00:41:28,199
And the derivative of foo with
respect to b is just X itself.

739
00:41:28,199 --> 00:41:30,730
And the derivative of foo with
respect to c comes out 1.

740
00:41:30,730 --> 00:41:34,260
So I'm pretty pleased
with this.

741
00:41:34,260 --> 00:41:36,830
What you've seen is, of
course, a little bit

742
00:41:36,829 --> 00:41:41,019
contrived, carefully organized
example to show you how we can

743
00:41:41,019 --> 00:41:43,610
manipulate algebraic
expressions, how we do that

744
00:41:43,610 --> 00:41:46,890
abstractly in terms of abstract
syntax rather than

745
00:41:46,889 --> 00:41:53,909
concrete syntax and how we can
use the abstraction to control

746
00:41:53,909 --> 00:41:57,849
what goes on in building
these expressions.

747
00:41:57,849 --> 00:42:00,909
But the real story isn't just
such a simple thing as that.

748
00:42:00,909 --> 00:42:03,889
The real story is, in fact, that
I'm manipulating these

749
00:42:03,889 --> 00:42:04,449
expressions.

750
00:42:04,449 --> 00:42:06,859
And the expressions are
the same expressions--

751
00:42:06,860 --> 00:42:08,150
going back to the slide--

752
00:42:08,150 --> 00:42:12,110
as the ones that are
Lisp expressions.

753
00:42:12,110 --> 00:42:13,890
There's a pun here.

754
00:42:13,889 --> 00:42:17,019
I've chosen my representation
to be the same as the

755
00:42:17,019 --> 00:42:22,829
representation in my language
of similar things.

756
00:42:22,829 --> 00:42:26,989
By doing so, I've invoked
a necessity.

757
00:42:26,989 --> 00:42:30,889
I created the necessity to have
things like quotation

758
00:42:30,889 --> 00:42:35,690
because of the fact that my
language is capable of writing

759
00:42:35,690 --> 00:42:39,820
expressions that talk about
expressions of the language.

760
00:42:39,820 --> 00:42:42,420
I need to have something that
says, this is an expression

761
00:42:42,420 --> 00:42:45,320
I'm talking about rather than
this expression is talking

762
00:42:45,320 --> 00:42:48,400
about something, and I want
to talk about that.

763
00:42:48,400 --> 00:42:51,289


764
00:42:51,289 --> 00:42:54,420
So quotation stops and says,
I'm talking about this

765
00:42:54,420 --> 00:42:55,670
expression itself.

766
00:42:55,670 --> 00:42:58,139


767
00:42:58,139 --> 00:43:03,029
Now, given that power, if I can
manipulate expressions of

768
00:43:03,030 --> 00:43:07,370
the language, I can begin to
build even much more powerful

769
00:43:07,369 --> 00:43:09,859
layers upon layers
of languages.

770
00:43:09,860 --> 00:43:12,370
Because I can write languages
that not only are embedded in

771
00:43:12,369 --> 00:43:16,730
Lisp or whatever language you
start with, but languages that

772
00:43:16,730 --> 00:43:20,400
are completely different, that
are just, if we say,

773
00:43:20,400 --> 00:43:23,280
interpreted in Lisp or
something like that.

774
00:43:23,280 --> 00:43:26,232
We'll get to understand those
words more in the future.

775
00:43:26,231 --> 00:43:30,150
But right now I just want to
leave you with the fact that

776
00:43:30,150 --> 00:43:36,160
we've hit a line which gives
us tremendous power.

777
00:43:36,159 --> 00:43:37,899
And this point we've bought
a sledgehammer.

778
00:43:37,900 --> 00:43:42,250
We have to be careful to what
flies when we apply it.

779
00:43:42,250 --> 00:43:42,570
Thank you.

780
00:43:42,570 --> 00:43:43,820
[MUSIC PLAYING]

781
00:43:43,820 --> 00:44:03,796


